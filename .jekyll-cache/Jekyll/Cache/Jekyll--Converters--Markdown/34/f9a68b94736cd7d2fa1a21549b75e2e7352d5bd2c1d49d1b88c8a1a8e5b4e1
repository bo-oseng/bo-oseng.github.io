I"8<h1 id="프로그래머스-문제-중-43165번-타겟넘버">프로그래머스 문제 중 43165번 ‘타겟넘버’</h1>
<p><a href="https://programmers.co.kr/learn/courses/30/lessons/43165">https://programmers.co.kr/learn/courses/30/lessons/43165</a></p>

<h3 id="문제설명">문제설명</h3>

<p>n개의 음이 아닌 정수들이 있습니다. 이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
</code></pre></div></div>

<p>사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.</p>

<h3 id="제한사항">제한사항</h3>

<ul>
  <li>주어지는 숫자의 개수는 2개 이상 20개 이하입니다.</li>
  <li>각 숫자는 1 이상 50 이하인 자연수입니다.</li>
  <li>타겟 넘버는 1 이상 1000 이하인 자연수입니다.</li>
</ul>

<h3 id="입출력-예">입출력 예</h3>

<table>
  <thead>
    <tr>
      <th>numbers</th>
      <th>target</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[1, 1, 1, 1, 1]</td>
      <td>3</td>
      <td>5</td>
    </tr>
    <tr>
      <td>[4, 1, 2, 1]</td>
      <td>4</td>
      <td>2</td>
    </tr>
  </tbody>
</table>

<h3 id="입출력-예-설명">입출력 예 설명</h3>

<p><strong>입출력 예 #1</strong></p>

<p>문제 예시와 같습니다.</p>

<p>입출력 예 #2</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+4+1-2+1 = 4
+4-1+2-1 = 4 + 총 2가지 방법이 있으므로, 2를 return 합니다.
</code></pre></div></div>

<hr />
<h2 id="풀이">풀이</h2>

<p>가능한 모든 경우를 탐색하며 target와 같다면 탐색을 종료하는 백트래킹 문제이다. 주어지는 입력 number의 원소의 개수와 가질 수 있는 부호의 개수가 같다.<br />
단 이 문제에서 주의 해야 할 부분은 target을 만족하는 경우의 순서는 고려하지 않으므로 조합인 combinations을 고려해야한다.</p>

<p>간단하게 itertools 모듈의 combinations을 쓰는게 동작도 가장 빠르고 간단하지만 실전에 대비해 직접 조합을 구하는 dfs를 구현 해보았다. dfs로 구현하는 조합은 이전에 다뤄봤던 <a href="https://bo-oseng.github.io/algorithms/boj/boj-15685.html">N과 M(2)</a>을 조금 수정했다.</p>

<p>[1, 2, 3, 4] 중 2개를 뽑는 조합을 구한다고 해보자. 그러면 보통 다음과 같이 경우를 따진다.</p>
<ul>
  <li>1로 시작하는 경우
    <ul>
      <li>[1, 2]</li>
      <li>[1, 3]</li>
      <li>[1, 4]</li>
    </ul>
  </li>
  <li>2로 시작하는 경우
    <ul>
      <li>[2, 3]</li>
      <li>[2, 4]</li>
    </ul>
  </li>
  <li>3으로 시작하는 경우
    <ul>
      <li>[3, 4]</li>
    </ul>
  </li>
</ul>

<p>이 과정을 [] 를 부모노드로 갖고, [1, 2, 3, 4]를 자식노드로 하며, 방문하는 순서를 고려하지 않는 탐색을 한다고 생각 할 수 있다.</p>

<p>이를 코드로 구현하면 다음과 같다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>

     <span class="c1"># 방문여부 확인을 위한 배열 선언
</span>    <span class="n">visited</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>

    <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">depth</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>

        <span class="k">nonlocal</span> <span class="n">cnt</span>

         <span class="c1"># depth가 n과 같다면 탐색 종료
</span>        <span class="k">if</span> <span class="n">depth</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
            <span class="k">return</span>

         <span class="c1"># 지금까지 탐색 중 numbers의 합이 target 과 같다면 cnt를 증가시키고 탐색 종료
</span>        <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
            <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">return</span>

         <span class="c1"># 입력받은 idx 부터 n까지 재귀적으로 dfs 진행
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                 <span class="c1"># 탐색한 인덱스의 numbers 값의 부호를 -1로 바꿔줌
</span>                <span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cnt</span>

<span class="n">solution</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[4, -1, 2, -1]
[4, 1, -2, 1]





2
</code></pre></div></div>

:ET