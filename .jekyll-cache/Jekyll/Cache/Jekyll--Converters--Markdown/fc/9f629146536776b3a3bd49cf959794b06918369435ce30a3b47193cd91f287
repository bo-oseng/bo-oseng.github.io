I"J7<h1 id="백준-문제-중-14890번">백준 문제 중 14890번</h1>
<p><a href="https://www.acmicpc.net/problem/14890">https://www.acmicpc.net/problem/14890</a></p>

<h3 id="문제">문제</h3>

<p>크기가 N×N인 지도가 있다. 지도의 각 칸에는 그 곳의 높이가 적혀져 있다.</p>

<p>오늘은 이 지도에서 지나갈 수 있는 길이 몇 개 있는지 알아보려고 한다. 길이란 한 행 또는 한 열 전부를 나타내며, 한쪽 끝에서 다른쪽 끝까지 지나가는 것이다.</p>

<p>다음과 같은 N=6인 경우 지도를 살펴보자.</p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14890/1.png" width="50%" height="50%" /></p>

<p>이때, 길은 총 2N개가 있으며, 아래와 같다.</p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14890/2.png" width="50%" height="50%" /></p>

<p>길을 지나갈 수 있으려면 길에 속한 모든 칸의 높이가 모두 같아야 한다. 또는, 경사로를 놓아서 지나갈 수 있는 길을 만들 수 있다. 경사로는 높이가 항상 1이며, 길이는 L이다. 또, 개수는 매우 많아 부족할 일이 없다. 경사로는 낮은 칸과 높은 칸을 연결하며, 아래와 같은 조건을 만족해야한다.</p>

<ul>
  <li>경사로는 낮은 칸에 놓으며, L개의 연속된 칸에 경사로의 바닥이 모두 접해야 한다.</li>
  <li>낮은 칸과 높은 칸의 높이 차이는 1이어야 한다.</li>
  <li>경사로를 놓을 낮은 칸의 높이는 모두 같아야 하고, L개의 칸이 연속되어 있어야 한다.</li>
</ul>

<p>아래와 같은 경우에는 경사로를 놓을 수 없다.</p>

<ul>
  <li>경사로를 놓은 곳에 또 경사로를 놓는 경우</li>
  <li>낮은 칸과 높은 칸의 높이 차이가 1이 아닌 경우</li>
  <li>낮은 지점의 칸의 높이가 모두 같지 않거나, L개가 연속되지 않은 경우</li>
  <li>경사로를 놓다가 범위를 벗어나는 경우</li>
</ul>

<p>L = 2인 경우에 경사로를 놓을 수 있는 경우를 그림으로 나타내면 아래와 같다.</p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14890/3.png" alt="img3" /></p>

<p>경사로를 놓을 수 없는 경우는 아래와 같다.</p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14890/4.png" /></p>

<p>위의 그림의 가장 왼쪽부터 1번, 2번, 3번, 4번 예제라고 했을 때, 1번은 높이 차이가 1이 아니라서, 2번은 경사로를 바닥과 접하게 놓지 않아서, 3번은 겹쳐서 놓아서, 4번은 기울이게 놓아서 불가능한 경우이다.</p>

<p>가장 위에 주어진 그림 예의 경우에 지나갈 수 있는 길은 파란색으로, 지나갈 수 없는 길은 빨간색으로 표시되어 있으며, 아래와 같다. 경사로의 길이 L = 2이다.</p>

<p><img src="https://upload.acmicpc.net/255e47cf-0988-4b7f-b81c-2742f010a4c5/-/preview/" width="50%" height="50%" /></p>

<p>지도가 주어졌을 때, 지나갈 수 있는 길의 개수를 구하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 N (2 ≤ N ≤ 100)과 L (1 ≤ L ≤ N)이 주어진다. 둘째 줄부터 N개의 줄에 지도가 주어진다. 각 칸의 높이는 10보다 작거나 같은 자연수이다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에 지나갈 수 있는 길의 개수를 출력한다.</p>

<hr />

<h2 id="풀이">풀이</h2>

<p>삼성 SW 문제를 풀면서 몇번 느낀건게 꼼꼼함이 굉장히 중요하다. 이문제는 특히나 조건을 모두 따지는게 중요했다.</p>

<p>길을 지나갈수 있는 경우는 크게 세가지이다.</p>
<ol>
  <li>평평한 길만이 이어지는 길</li>
  <li>이전보다 다음 경사가 높으면서 이전 지형들에 경사로를 설치 할 수 있는경우</li>
  <li>이전보다 다음 경사가 낮으면서 다음 지형들에 경사로를 설치 할 수 있는경우</li>
</ol>

<p>코드의 흐름은 다음과 같다.</p>

<p>위의 세 조건을 판별하는 함수를 is_possible이라 하자.<br />
is_possible은 지형을 한줄씩 리스트로 입력받아 가능한 길인지 불가능한 길인지 위의 세 조건을 통해 판별한다.<br />
주어진 지형을 row마다 하나씩 쪼개 is_possible에 차례로 넣어 조사하고 주어진 지형을 zip함수를 활용해 col 마다 하나씩 쪼개 is_possible에 차레로 조사를 한뒤 True를 반환할때만 cnt를 1 증가시킨다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span><span class="p">,</span> <span class="n">l</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">board</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">is_possible</span><span class="p">(</span><span class="n">search</span><span class="p">):</span>
     <span class="c1"># 경사로가 설치 된 경우를 확인할 리스트 선언
</span>    <span class="n">visited</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>

         <span class="c1"># 이전길과 다음길의 높이가 같다면 가능한길이므로 continue
</span>        <span class="k">if</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
            <span class="k">continue</span>
         <span class="c1"># 높이 차이가 2 이상이라면 바로 False 리턴
</span>        <span class="k">elif</span> <span class="nb">abs</span><span class="p">(</span><span class="n">search</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span><span class="mi">1</span> <span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
         <span class="c1"># 2번의 조건
</span>        <span class="k">elif</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">-</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">x</span><span class="p">]</span> <span class="ow">or</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">tmp</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
         <span class="c1"># 3번의 조건
</span>        <span class="k">elif</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">l</span> <span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">visited</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">x</span><span class="p">]</span> <span class="ow">or</span> <span class="n">search</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">tmp</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="n">visited</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>

<span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>   
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">is_possible</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">]):</span>
        <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="n">is_possible</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">board</span><span class="p">))[</span><span class="n">i</span><span class="p">]):</span>
        <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">print</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>


</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>11
</code></pre></div></div>

<ul>
  <li>추가적으로 zip함수에 대해 조금 살펴보자</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
<span class="n">a</span> <span class="o">=</span> <span class="p">[</span>
<span class="s">'4 4 4 4 4 4'</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span>
<span class="s">'3 3 3 3 3 3'</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span>
<span class="s">'2 2 2 2 2 2'</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span>
<span class="s">'1 1 1 1 1 1'</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span>
<span class="s">'0 0 0 0 0 0'</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span>
<span class="p">]</span>
<span class="n">pprint</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">()</span>
<span class="n">pprint</span><span class="p">((</span><span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">))))</span>
<span class="c1"># 이처럼 행렬의 가로 세로를 바꾸는데 간단하게 활용할 수 있다.
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[['4', '4', '4', '4', '4', '4'],
 ['3', '3', '3', '3', '3', '3'],
 ['2', '2', '2', '2', '2', '2'],
 ['1', '1', '1', '1', '1', '1'],
 ['0', '0', '0', '0', '0', '0']]

[('4', '3', '2', '1', '0'),
 ('4', '3', '2', '1', '0'),
 ('4', '3', '2', '1', '0'),
 ('4', '3', '2', '1', '0'),
 ('4', '3', '2', '1', '0'),
 ('4', '3', '2', '1', '0')]
</code></pre></div></div>

:ET