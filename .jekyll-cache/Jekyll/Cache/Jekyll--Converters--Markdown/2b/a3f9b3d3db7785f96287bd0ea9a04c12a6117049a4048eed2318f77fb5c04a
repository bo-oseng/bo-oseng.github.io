I""<h1 id="백준-문제-중-17298번">백준 문제 중 17298번</h1>
<p>https://www.acmicpc.net/problem/17298</p>

<h3 id="문제">문제</h3>

<p>크기가 N인 수열 A = A1, A2, …, AN이 있다. 수열의 각 원소 Ai에 대해서 오큰수 NGE(i)를 구하려고 한다. Ai의 오큰수는 오른쪽에 있으면서 Ai보다 큰 수 중에서 가장 왼쪽에 있는 수를 의미한다. 그러한 수가 없는 경우에 오큰수는 -1이다.</p>

<p>예를 들어, A = [3, 5, 2, 7]인 경우 NGE(1) = 5, NGE(2) = 7, NGE(3) = 7, NGE(4) = -1이다. A = [9, 5, 4, 8]인 경우에는 NGE(1) = -1, NGE(2) = 8, NGE(3) = 8, NGE(4) = -1이다.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000,000)이 주어진다. 둘째 줄에 수열 A의 원소 A1, A2, …, AN (1 ≤ Ai ≤ 1,000,000)이 주어진다.</p>

<h3 id="출력">출력</h3>

<p>총 N개의 수 NGE(1), NGE(2), …, NGE(N)을 공백으로 구분해 출력한다</p>

<hr />
<h2 id="풀이">풀이</h2>

<h4 id="try1">Try1</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>

 <span class="c1"># 입력을 [:n]로 n개제한
</span><span class="n">nums</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>

 <span class="c1"># deque 자료형 선언
</span><span class="n">nums</span> <span class="o">=</span> <span class="n">deque</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>

<span class="n">ans</span><span class="o">=</span><span class="p">[]</span>

 <span class="c1"># nums가 존재하는 동안 반복
</span><span class="k">while</span> <span class="n">nums</span><span class="p">:</span>
    
     <span class="c1"># 가장 왼쪽 팝
</span>    <span class="n">x</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
         <span class="c1"># num이 x보다 크고 가장 왼쪽인 경우
</span>        <span class="k">if</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">num</span><span class="p">:</span>
            <span class="n">ans</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
            <span class="k">break</span>
     <span class="c1"># nums안에 x보다 큰 수가 없을 경우
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">ans</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">ans</span><span class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4
3 5 2 7
5 7 7 -1 
</code></pre></div></div>

<p>주어지는 입력이 100만개 까지도 커질수 있는데 while과 for로 두번 스캔하는 코드라 O(N^2)이 되며 시간초과가 떴다.</p>

<h3 id="try2">Try2</h3>

<p>단순히 for 와 while의 이중 반복문으로 접근한다면 입력값의 갯수가 커질수록 기하급수적으로 복잡도가 높아지므로 n전체를 스캔하는 반복문을 최대한 줄여야 하고 이를 위해서 스택에 저장해가며 스캔하는 느낌까지는 알았는데 코드의 구성을 혼자 해결하기가 쉽지가 않아 검색을 통해 참고했다.</p>

<p>코드의 구성은 이렇다.</p>

<ol>
  <li>nums의 원소를 차례로 스캔한다.</li>
  <li>만약 스택 stk이 비어 있다면 현재의 원소를 넣는다.</li>
  <li>다음 원소를 스캔할때 스택이 비어있지 않고, 스택의 가장 상단의 원소보다 스캔중인 원소가 크다면 무조건 스캔중인 원소가 스택에 있는 원소의 오큰수가 됨을 알 수 있다.(순서대로 스캔 했으므로 스택에 있는 원소의 오른쪽에 있음은 당연하고, 스택에 있는 수보다 스캔중인 수가 큼을 이미 판별했다)</li>
  <li>스캔중인 원소를 스택에 있는 원소들의 오큰수로 하여 ans를 업데이트한다.
    <ul>
      <li>ans를 업데이트 할때는 인덱스로 접근하는 편이 좋으므로 스택에 넣을때 원소의 인덱스를 같이 넣는다.[nums[i],i]</li>
    </ul>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>

<span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="n">num</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())][:</span><span class="n">n</span><span class="p">]</span>

<span class="n">stk</span> <span class="o">=</span> <span class="p">[]</span>

 <span class="c1"># 0~n-1까지 각각을 key로 -1을 value로 갖는 딕셔너리 선언
</span><span class="n">ans</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-=</span><span class="mi">1</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>

     <span class="c1"># (2) 이후 stk이 비거나 스택의 최상단값인 
</span>     <span class="c1">#    stk[-1][0]와 nums[i]를 비교
</span>    <span class="k">while</span> <span class="n">stk</span> <span class="ow">and</span> <span class="n">stk</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">&lt;</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
         
         <span class="c1">#ans[스택에서 pop한 값의 인덱스] = nums[i]
</span>        <span class="n">ans</span><span class="p">[</span><span class="n">stk</span><span class="p">.</span><span class="n">pop</span><span class="p">()[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

     <span class="c1"># (1) 초기에는 stk이 비어있으므로 바로 스택에 추가
</span>     <span class="c1"># (3) 다시 스택이 비었다면 스택에 추가
</span>    <span class="n">stk</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">i</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">ans</span><span class="p">.</span><span class="n">values</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5
3 2 4 1 8
4 4 8 8 -1
</code></pre></div></div>

:ET