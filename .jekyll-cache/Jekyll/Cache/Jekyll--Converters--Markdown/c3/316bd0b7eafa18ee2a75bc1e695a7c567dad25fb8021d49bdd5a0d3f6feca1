I"1<h1 id="백준-문제-중-15685번">백준 문제 중 15685번</h1>
<p><a href="https://www.acmicpc.net/problem/15685">https://www.acmicpc.net/problem/15685</a></p>

<h3 id="문제">문제</h3>

<p>드래곤 커브는 다음과 같은 세 가지 속성으로 이루어져 있으며, 이차원 좌표 평면 위에서 정의된다. 좌표 평면의 x축은 → 방향, y축은 ↓ 방향이다.</p>
<ol>
  <li>시작 점</li>
  <li>시작 방향</li>
  <li>세대</li>
</ol>

<p>0세대 드래곤 커브는 아래 그림과 같은 길이가 1인 선분이다. 아래 그림은 (0, 0)에서 시작하고, 시작 방향은 오른쪽인 0세대 드래곤 커브이다.</p>

<center>
  <img src="http://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/1.png" width="50%" />
</center>

<p>1세대 드래곤 커브는 0세대 드래곤 커브를 끝 점을 기준으로 시계 방향으로 90도 회전시킨 다음 0세대 드래곤 커브의 끝 점에 붙인 것이다. 끝 점이란 시작 점에서 선분을 타고 이동했을 때, 가장 먼 거리에 있는 점을 의미한다.</p>

<center>
  <img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/2.png" width="50%" />
</center>

<p>2세대 드래곤 커브도 1세대를 만든 방법을 이용해서 만들 수 있다. (파란색 선분은 새로 추가된 선분을 나타낸다)</p>

<center>
  <img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/3.png" width="50%" />
</center>

<p>3세대 드래곤 커브도 2세대 드래곤 커브를 이용해 만들 수 있다. 아래 그림은 3세대 드래곤 커브이다.</p>

<center>
  <img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/4.png" width="50%" />
</center>

<p>즉, K(K &gt; 1)세대 드래곤 커브는 K-1세대 드래곤 커브를 끝 점을 기준으로 90도 시계 방향 회전 시킨 다음, 그것을 끝 점에 붙인 것이다.</p>

<p>크기가 100×100인 격자 위에 드래곤 커브가 N개 있다. 이때, 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 정사각형의 개수를 구하는 프로그램을 작성하시오. 격자의 좌표는 (x, y)로 나타내며, 0 ≤ x ≤ 100, 0 ≤ y ≤ 100만 유효한 좌표이다.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 드래곤 커브의 개수 N(1 ≤ N ≤ 20)이 주어진다. 둘째 줄부터 N개의 줄에는 드래곤 커브의 정보가 주어진다. 드래곤 커브의 정보는 네 정수 x, y, d, g로 이루어져 있다. x와 y는 드래곤 커브의 시작 점, d는 시작 방향, g는 세대이다. (0 ≤ x, y ≤ 100, 0 ≤ d ≤ 3, 0 ≤ g ≤ 10)</p>

<p>입력으로 주어지는 드래곤 커브는 격자 밖으로 벗어나지 않는다. 드래곤 커브는 서로 겹칠 수 있다.</p>

<p>방향은 0, 1, 2, 3 중 하나이고, 다음을 의미한다.</p>

<ul>
  <li>0: x좌표가 증가하는 방향 (→)</li>
  <li>1: y좌표가 감소하는 방향 (↑)</li>
  <li>2: x좌표가 감소하는 방향 (←)</li>
  <li>3: y좌표가 증가하는 방향 (↓)</li>
</ul>

<h3 id="출력">출력</h3>

<p>첫째 줄에 크기가 1×1인 정사각형의 네 꼭짓점이 모두 드래곤 커브의 일부인 것의 개수를 출력한다.</p>

<hr />

<h2 id="풀이">풀이</h2>

<p>처음 문제에 접근할 때는 재귀적으로 드레곤 커브를 늘려나가는 식으로 생각했었다. 그러나 이런식의 접근은 90도 회전을 다룰 때 너무 까다로웠다.</p>

<p>문제를 조금 더 관찰하다 보니 다음 세대의 드래곤 커브는 이전 세대의 끝점을 기준으로 시작하므로 이전 세대의 시작점 부터 끝점까지 이동경로와 다음세대의 시작점(이전 세대의 끝점) 의 이동경로를 연관지어 구할 수 있었다. 일반적인 문제들과 달리 직접적인 좌표 계산이 아닌 이동방향의 변화로 이동을 관리 해야 한다는게 조금 생각하기 힘든 부분이었다.</p>

<p>예시를 통해 조금 더 자세히 살펴보자.</p>
<center>
  <img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/15685/3.png" width="30%" />
</center>
<p>위 그림은 2세대의 드래곤커브이다. 이전 1세대 커브는 [0, 0] -&gt; [1, 0] -&gt; [1, -1] 이고 이동방향의 변화는 0 -&gt; 1 이다. 그리고 이 커브를 A라하자. 그리고 다음 커브를 그리기위해 1세대 커브를 끝점인 [1, -1] 을 기준으로 회전하고 이를 이어 붙이면 [1, -1] -&gt; [0, -1] -&gt; [0, 2] 이고 이동 방향의 변화는 2 -&gt; 1이다. 그리고 이 커브를 B라하자.</p>

<p>A와 B의 상관성은 끝점을 기준으로 존재한다. B커브의 [0, -2] 에서 [1, -1] 을 향하는 이동방향의 변화와 A커브의 [0, 0] 에서 [1, -1]을 향하는 이동방향의 변화에 연관이 있음을 알 수 있다.</p>

<p>이전 세대의 이동방향의 변화를 끝점에 가까운 순으로 뒤집어 각각을 시계방향으로 90도 회전하면, 각각이 새로 생길 커브의 이동방향 변화를 나타낸다.</p>

<p>코드의 흐름은 다음과 같다.</p>
<ol>
  <li>정사각형 1 x 1 의 네 꼭짓점에 커브가 들어 오려면 전체 좌표에서 2 x 2 모양이 모두 1인 부분이 몇개인지 세는 함수가 필요하고 이를 위해 counting_four() 를 선언한다.</li>
  <li>위에서 설명한대로 커브를 그릴 cal_curves(x, y, d, g)를 선언한다.</li>
  <li>입력으로 주어진 모든 커브를 좌표위에 그리고 정답을 출력한다.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">board</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">101</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">101</span><span class="p">)]</span>
<span class="nb">dir</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="mi">1</span><span class="p">:</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="mi">2</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="mi">3</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]}</span>
<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">curves</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>


<span class="k">def</span> <span class="nf">counting_four</span><span class="p">():</span>
    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="ow">and</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">cnt</span>


<span class="k">def</span> <span class="nf">cal_curves</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">g</span><span class="p">):</span>
    <span class="n">curve_dirs</span> <span class="o">=</span> <span class="p">[</span><span class="n">d</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">g</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">curve_dirs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">curve_dirs</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">curve_dirs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">curve_dir</span> <span class="ow">in</span> <span class="n">curve_dirs</span><span class="p">:</span>
        <span class="n">board</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="nb">dir</span><span class="p">[</span><span class="n">curve_dir</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">x</span> <span class="o">+</span> <span class="nb">dir</span><span class="p">[</span><span class="n">curve_dir</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">board</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>


<span class="k">for</span> <span class="n">curve</span> <span class="ow">in</span> <span class="n">curves</span><span class="p">:</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">g</span> <span class="o">=</span> <span class="n">curve</span>
    <span class="n">cal_curves</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">g</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">counting_four</span><span class="p">())</span>
</code></pre></div></div>
:ET