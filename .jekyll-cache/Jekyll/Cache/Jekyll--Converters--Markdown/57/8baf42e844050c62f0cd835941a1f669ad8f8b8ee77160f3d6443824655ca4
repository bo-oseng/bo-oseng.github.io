I"8<h1 id="백준-문제-중-17413번">백준 문제 중 17413번</h1>
<p>https://www.acmicpc.net/problem/17413</p>

<h3 id="문제">문제</h3>

<p>문자열 S가 주어졌을 때, 이 문자열에서 단어만 뒤집으려고 한다.</p>

<p>먼저, 문자열 S는 아래와과 같은 규칙을 지킨다.</p>

<ol>
  <li>알파벳 소문자(‘a’-‘z’), 숫자(‘0’-‘9’), 공백(‘ ‘), 특수 문자(‘&lt;’, ‘&gt;’)로만 이루어져 있다.</li>
  <li>문자열의 시작과 끝은 공백이 아니다.</li>
  <li>’&lt;’와 ‘&gt;’가 문자열에 있는 경우 번갈아가면서 등장하며, ‘&lt;’이 먼저 등장한다. 또, 두 문자의 개수는 같다.</li>
</ol>

<p>태그는 ‘&lt;’로 시작해서 ‘&gt;’로 끝나는 길이가 3 이상인 부분 문자열이고, ‘&lt;’와 ‘&gt;’ 사이에는 알파벳 소문자와 공백만 있다. 단어는 알파벳 소문자와 숫자로 이루어진 부분 문자열이고, 연속하는 두 단어는 공백 하나로 구분한다. 태그는 단어가 아니며, 태그와 단어 사이에는 공백이 없다.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 문자열 S가 주어진다. S의 길이는 100,000 이하이다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에 문자열 S의 단어를 뒤집어서 출력한다.</p>

<hr />

<h2 id="풀이">풀이</h2>

<p>생각해야 될 조건이 많아서 까다로운 문제였다.</p>

<p>입력받은 문자열을 스캔하면서 경우를</p>
<ol>
  <li>alphanumeric</li>
  <li>alphanumeric 사이의 공백 ‘ ‘</li>
  <li>’&lt;’</li>
  <li>스캔 종료후에 stk이 차있을 경우
로 나누어 생각해보자</li>
</ol>

<ul>
  <li>
    <p>1 의 경우 순서를 뒤집어야 하므로 스택에 저장을 하고 있다가 ‘ ‘이나 ‘&lt;’를 만나면 pop을 이용해 역순으로 ans에 더해준다</p>
  </li>
  <li>
    <p>2 의 경우 위에서 말했듯 stk이 빌때까지 pop을해 ans이 더해주되 공백의 문자열 다음 스캔을 위해 i+=1을 해준다.</p>
  </li>
  <li>
    <p>3 의 경우는 원래 순서를 유지 하므로 ‘&gt;’를 만나기 전까지 ans에 직접 더한다. 단. stk이 비어있지 않다면 ‘&lt;&gt;’전에 만난 alphanumeric을 역순으로 ans에 더해준다.</p>
  </li>
  <li>
    <p>4 의 경우는 stk에 alphanumeric이 남은채로 문자열이 종료 되는경우(alphanumeric이 문자열 마지막) 이므로 stk이 빌때까지 ans에 더해준다.</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">words</span> <span class="o">=</span> <span class="nb">input</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">reverse_2</span><span class="p">(</span><span class="n">words</span><span class="p">:</span><span class="nb">str</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">str</span><span class="p">:</span>
    
    <span class="n">a</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
    <span class="n">stk</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="s">''</span>

    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">a</span><span class="p">:</span>

        <span class="k">if</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">isalnum</span><span class="p">():</span>
            <span class="n">stk</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

        <span class="k">elif</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="s">' '</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">stk</span><span class="p">:</span>
                <span class="n">ans</span><span class="o">+=</span><span class="n">stk</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="n">ans</span><span class="o">+=</span><span class="s">' '</span>
            <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>

        <span class="k">elif</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="s">'&lt;'</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">stk</span><span class="p">:</span>
                <span class="n">ans</span><span class="o">+=</span><span class="n">stk</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>

            <span class="k">while</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="ow">not</span> <span class="s">'&gt;'</span><span class="p">:</span>
                <span class="n">ans</span><span class="o">+=</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
            <span class="n">ans</span><span class="o">+=</span><span class="s">'&gt;'</span>
            <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
    <span class="k">while</span> <span class="n">stk</span><span class="p">:</span>
        <span class="n">ans</span><span class="o">+=</span><span class="n">stk</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">reverse_2</span><span class="p">(</span><span class="n">words</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;int&gt;&lt;max&gt;2147483647&lt;long long&gt;&lt;max&gt;9223372036854775807
&lt;int&gt;&lt;max&gt;7463847412&lt;long long&gt;&lt;max&gt;7085774586302733229
</code></pre></div></div>

<h3 id="배운점">배운점</h3>
<ol>
  <li>문자열을 다룰때 공백 조건이 있다면 웬만하면 strip()을 고려 해보자</li>
  <li>self.isalnum() 메소드</li>
</ol>
:ET