I"#<h1 id="백준-문제-중-19236번">백준 문제 중 19236번</h1>
<p><a href="https://www.acmicpc.net/problem/19236">https://www.acmicpc.net/problem/19236</a></p>

<h3 id="문제">문제</h3>

<p>아기 상어가 성장해 청소년 상어가 되었다.</p>

<p>4×4크기의 공간이 있고, 크기가 1×1인 정사각형 칸으로 나누어져 있다. 공간의 각 칸은 (x, y)와 같이 표현하며, x는 행의 번호, y는 열의 번호이다. 한 칸에는 물고기가 한 마리 존재한다. 각 물고기는 번호와 방향을 가지고 있다. 번호는 1보다 크거나 같고, 16보다 작거나 같은 자연수이며, 두 물고기가 같은 번호를 갖는 경우는 없다. 방향은 8가지 방향(상하좌우, 대각선) 중 하나이다.</p>

<p>오늘은 청소년 상어가 이 공간에 들어가 물고기를 먹으려고 한다. 청소년 상어는 (0, 0)에 있는 물고기를 먹고, (0, 0)에 들어가게 된다. 상어의 방향은 (0, 0)에 있던 물고기의 방향과 같다. 이후 물고기가 이동한다.</p>

<p>물고기는 번호가 작은 물고기부터 순서대로 이동한다. 물고기는 한 칸을 이동할 수 있고, 이동할 수 있는 칸은 빈 칸과 다른 물고기가 있는 칸, 이동할 수 없는 칸은 상어가 있거나, 공간의 경계를 넘는 칸이다. 각 물고기는 방향이 이동할 수 있는 칸을 향할 때까지 방향을 45도 반시계 회전시킨다. 만약, 이동할 수 있는 칸이 없으면 이동을 하지 않는다. 그 외의 경우에는 그 칸으로 이동을 한다. 물고기가 다른 물고기가 있는 칸으로 이동할 때는 서로의 위치를 바꾸는 방식으로 이동한다.</p>

<p>물고기의 이동이 모두 끝나면 상어가 이동한다. 상어는 방향에 있는 칸으로 이동할 수 있는데, 한 번에 여러 개의 칸을 이동할 수 있다. 상어가 물고기가 있는 칸으로 이동했다면, 그 칸에 있는 물고기를 먹고, 그 물고기의 방향을 가지게 된다. 이동하는 중에 지나가는 칸에 있는 물고기는 먹지 않는다. 물고기가 없는 칸으로는 이동할 수 없다. 상어가 이동할 수 있는 칸이 없으면 공간에서 벗어나 집으로 간다. 상어가 이동한 후에는 다시 물고기가 이동하며, 이후 이 과정이 계속해서 반복된다.</p>

<center><img src="https://upload.acmicpc.net/1c7c473e-5e2c-4c45-9c88-b3b7cd06a360/-/preview/" width="50%" />  
  
  <그림1>&lt;/center&gt;




&lt;그림 1&gt;은 청소년 상어가 공간에 들어가기 전 초기 상태이다. 상어가 공간에 들어가면 (0, 0)에 있는 7번 물고기를 먹고, 상어의 방향은 ↘이 된다. &lt;그림 2&gt;는 상어가 들어간 직후의 상태를 나타낸다.

<center><img src="https://upload.acmicpc.net/8f26df12-6f68-43a3-9f6e-7416144e91dc/-/preview/" width="50%" />  
  
  <그림2>&lt;/center&gt;


이제 물고기가 이동해야 한다. 1번 물고기의 방향은 ↗이다. ↗ 방향에는 칸이 있고, 15번 물고기가 들어있다. 물고기가 있는 칸으로 이동할 때는 그 칸에 있는 물고기와 위치를 서로 바꿔야 한다. 따라서, 1번 물고기가 이동을 마치면 &lt;그림 3&gt;과 같아진다.

<center><img src="https://upload.acmicpc.net/75315b3c-ee04-4ae8-9422-5b1137f86117/-/preview/" width="50%" />  
  
  <그림3>&lt;/center&gt;


2번 물고기의 방향은 ←인데, 그 방향에는 상어가 있으니 이동할 수 없다. 방향을 45도 반시계 회전을 하면 ↙가 되고, 이 칸에는 3번 물고기가 있다. 물고기가 있는 칸이니 서로 위치를 바꾸고, &lt;그림 4&gt;와 같아지게 된다.

<center>
  <img src="https://upload.acmicpc.net/7be317c7-b8b5-4b83-becb-ffd8550311fb/-/preview/" width="50%" />  
  <그림4>
&lt;/center&gt;


3번 물고기의 방향은 ↑이고, 존재하지 않는 칸이다. 45도 반시계 회전을 한 방향 ↖도 존재하지 않으니, 다시 회전을 한다. ← 방향에는 상어가 있으니 또 회전을 해야 한다. ↙ 방향에는 2번 물고기가 있으니 서로의 위치를 교환하면 된다. 이런 식으로 모든 물고기가 이동하면 &lt;그림 5&gt;와 같아진다.

<center>
  <img src="https://upload.acmicpc.net/a58fbda0-bb64-4773-b5f9-2da0bd3f0fd2/-/preview/" width="50%" />  
  
  <그림5>
&lt;/center&gt;


물고기가 모두 이동했으니 이제 상어가 이동할 순서이다. 상어의 방향은 ↘이고, 이동할 수 있는 칸은 12번 물고기가 있는 칸, 15번 물고기가 있는 칸, 8번 물고기가 있는 칸 중에 하나이다. 만약, 8번 물고기가 있는 칸으로 이동하면, &lt;그림 6&gt;과 같아지게 된다.

<center>
  <img src="https://upload.acmicpc.net/2431d117-fab6-4de9-8d76-2fb41d471ee7/-/crop/651x656/1,12/-/preview/" width="50%" />  
  <그림6>
&lt;/center&gt;


상어가 먹을 수 있는 물고기 번호의 합의 최댓값을 구해보자.

### 입력

첫째 줄부터 4개의 줄에 각 칸의 들어있는 물고기의 정보가 1번 행부터 순서대로 주어진다. 물고기의 정보는 두 정수 ai, bi로 이루어져 있고, ai는 물고기의 번호, bi는 방향을 의미한다. 방향 bi는 8보다 작거나 같은 자연수를 의미하고, 1부터 순서대로 ↑, ↖, ←, ↙, ↓, ↘, →, ↗ 를 의미한다.

### 출력

상어가 먹을 수 있는 물고기 번호의 합의 최댓값을 출력한다.

---

## 풀이

문제의 흐름을 잘 따라가야 하는 문제였다.  

문제의 흐름은 다음과 같다,
1. 상어를 0,0 에 넣는다. ( 이때 상어는 0,0 에 있던 물고기를 먹고 0, 0 에 있던 물고기의 방향을 갖는다)
2. 1 ~ 16번의 물고기를 순서대로 규칙에 맞게 이동 시킨다.
3. 상어가 움직일 수 있는 후보중 하나를 골라 해당 물고기를 먹고, 그 물고기의 방향을 갖느다.
4. 2 ~ 3 과정을 더이상 상어가 이동할 수 없을때 까지 반복한다.


이를 코드를 구성하면 다음과 같다.


```python
  from pprint import pprint
  from copy import deepcopy

  datas = [list(map(int, input().split())) for _ in range(4)]

  # 각각의 인덱스에 [물고기의 번호, 물고기의 방향]을 갖는 리스트 fish 선언
  fish = [ [ [ data[0], data[1] ], [ data[2], data[3] ], 
              [ data[4], data[5] ], [ data[6], data[7] ]] for data in datas]
          
  # 8개 방향을 딕셔너리로 저장
  dir = {1: [-1, 0], 2: [-1, -1], 3: [0, -1], 4: [1, -1],
        5: [1, 0], 6: [1, 1], 7: [0, 1], 8: [-1, 1]}

  # 1 ~ 16번까지 물고기를 찾고 주어진 규칙에 맞게 물고기의 위치를 이동할 함수
  def move_fish(board):

      for k in range(1, 16 + 1):
          flag = False
          for i in range(4):
              for j in range(4):
                  if k == board[i][j][0]:
                      # k 가 존재한다면 flag = True
                      flag = True
                      r, c, d = i, j, board[i][j][1]

          # flag가 True 라면 k물고기 이동
          if flag:
              nr, nc = r + dir[d][0], c + dir[d][1]
              nd, cnt = d, 1
              # nr, nc 가 범위를 벗어나지 않고, 상어가 아닐때까지 방향을 바꿈
              while nr &lt; 0 or nr &gt;= 4 or nc &lt; 0 or nc &gt;= 4 or board[nr][nc][0] == SHARK:
                  # 방향을 8번 바꾸어도 만족하지 못한다면 break
                  if cnt &gt;= 8:
                      break
                  nd = nd%8 + 1
                  nr, nc = r + dir[nd][0], c + dir[nd][1]
                  cnt += 1
              
              if cnt &lt; 8:
                  board[r][c][1] = nd
                  board[r][c], board[nr][nc] = board[nr][nc], board[r][c]
      return board

  def dfs(r, c, board, score):
      
      global max_score

      score += board[r][c][0]
      max_score = max(max_score, score)
      # 물고기를 먹고 해당 자리에 상어를 배치, 상어의 방향도 최신화
      board[r][c][0] = SHARK
      d = board[r][c][1] 

      # 물고기를 규칙에 맞게 이동 시켜줌 
      board = move_fish(board)
      
      nr, nc = r, c
      for _ in range(1, 4):
          nr = nr + dir[d][0]
          nc = nc + dir[d][1]
          if 0 &lt;= nr &lt; 4 and 0 &lt;= nc &lt; 4 and board[nr][nc][0] &gt; 0:
              # 이전 상어가 있던 칸을 빈칸으로 만들어줌
              board[r][c] = [0, 0]
              # deepcopy를 통해 최신화된 맵을 넘겨주며 재귀적으로 dfs 실행 
              dfs(nr, nc, deepcopy(board), score)

  SHARK = -1
  max_score = 0
      
  dfs(0, 0, fish, 0)
  print(max_score)

```
```

    7 6 2 3 15 6 9 8
    3 1 1 8 14 7 10 1
    6 1 13 6 4 3 11 4
    16 1 8 7 5 2 12 2
    33
```
</그림6></center></그림5></center></그림4></center></그림3></center></그림2></center></그림1></center>
:ET