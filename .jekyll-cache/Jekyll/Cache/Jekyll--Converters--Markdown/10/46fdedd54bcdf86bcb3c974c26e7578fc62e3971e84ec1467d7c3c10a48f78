I" <h1 id="프로그래머스-문제-중-조이스틱">프로그래머스 문제 중 ‘조이스틱’</h1>

<h3 id="문제설명">문제설명</h3>

<p>조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA</p>

<p>조이스틱을 각 방향으로 움직이면 아래와 같습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>▲ - 다음 알파벳
▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)
▶ - 커서를 오른쪽으로 이동 (마지막 위치에서 오른쪽으로 이동하면 첫 번째 문자에 커서)
</code></pre></div></div>

<p>예를 들어 아래의 방법으로 “JAZ”를 만들 수 있습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.
- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.
- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.
따라서 11번 이동시켜 "JAZ"를 만들 수 있고, 이때가 최소 이동입니다.
</code></pre></div></div>

<p>만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.</p>

<h3 id="제한사항">제한사항</h3>

<p>name은 알파벳 대문자로만 이루어져 있습니다.
name의 길이는 1 이상 20 이하입니다.</p>

<h3 id="입출력-예">입출력 예</h3>

<table>
  <thead>
    <tr>
      <th>name</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“JEROEN”</td>
      <td>56</td>
    </tr>
    <tr>
      <td>“JAN”</td>
      <td>23</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="풀이">풀이</h2>

<p>level 2라 하기에는상당히 어려웠던 문제였다. 그리디로 분류되어 있지만 구현에 가까운 문제였던거 같다. 오랜시간 고민했지만 혼자 해결은 못했고, 다른 사람의 풀이를 참고했다.</p>

<p>주어진 입력을 최소한의 조작으로 원하는 문자열로 만들어야 한다. 문제를 읽으면 알 수 있듯 동작을 두개로 분리할 수 있다.</p>

<ol>
  <li>알파벳을 바꾸는 상하 동작</li>
  <li>다음으로 조작할 알파벳을 선택하는 좌우 동작</li>
</ol>

<p>1번의 상하의 동작은 어떤 순서로 알파벳을 선택하든 상하의 횟수가 변하지 않음을 알 수있다. 그러나 2번의 좌우의 동작은 알파벳의 배치에 따라 바뀔수 있으므로 알파벳을 선택하는 순서를 잘 고려해야 한다.</p>

<p>코드의 구성은 다음과 같다.</p>

<ol>
  <li>입력으로 주어진 name에 대해서 각 알파벳을 만드는데 필요한 최소의 값을 각각 구해 answer에 더해준다.</li>
  <li>좌우 동작이 최소인 경우를 구하기 위해 입력으로 주어진 name에 대해 모든 원소에 대해 최소한의 움직임으로 “A”가 아닌 모든 알파벳을 방문하는 횟수 move를 구한고 answer에 더해준다.</li>
</ol>

<p>2번의 동작에 대해 좀더 자세히 살펴보자</p>

<center>
  <img src="https://user-images.githubusercontent.com/94548914/172375288-2784c99e-0a2b-4ea9-916a-5a07697b8dc8.JPG" />
</center>

<p>name의 모든 요소에 대해 순차적으로 진행 하는데 이때 인덱스를 idx라 하자. 각 idx에 대하여 좌우로 움직여서 A가 아닌 모든 알파벳을 한번 이상 방문하는 것이 목표이다. 이 방문을 모든 idx에 대해 반복하고 각 idx 마다 움직인 거리의 총합, 즉 (idx: 0을 기준으로 현재 인덱스 까지의 거리, ((n - 1) - next_idx + 1): 0부터 왼쪽으로 A가 아닌 알파벳 까지 거리, distance: 왼쪽 오른쪽 중 더 짧은 거리)의 합과 기존의 move 중 최소의 값을 저장한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

     <span class="c1"># 알파벳을 바꾸는 상하 동작의 최솟값을 각각 answer에 더해줌
</span>    <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">name</span><span class="p">:</span>
        <span class="n">answer</span> <span class="o">+=</span> <span class="nb">min</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">"A"</span><span class="p">),</span> <span class="nb">ord</span><span class="p">(</span><span class="s">"Z"</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

     <span class="c1"># 자리를 바꾸는 좌우 동작의 총합 최솟값을 구해 answer에 더해줌
</span>    <span class="n">move</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">next_idx</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">next_idx</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">name</span><span class="p">[</span><span class="n">next_idx</span><span class="p">]</span> <span class="o">==</span> <span class="s">'A'</span><span class="p">):</span>
            <span class="n">next_idx</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">distance</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="n">next_idx</span><span class="p">)</span>
        <span class="n">move</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">move</span><span class="p">,</span> <span class="n">idx</span> <span class="o">+</span> <span class="n">n</span> <span class="o">-</span> <span class="n">next_idx</span> <span class="o">+</span> <span class="n">distance</span><span class="p">)</span>

    <span class="n">answer</span> <span class="o">+=</span> <span class="n">move</span>
    <span class="k">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">answer</span>

<span class="n">solution</span><span class="p">(</span><span class="s">"JEROEN"</span><span class="p">)</span>
</code></pre></div></div>
:ET