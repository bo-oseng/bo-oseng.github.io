I"k<h1 id="백준-문제-중-11054번">백준 문제 중 11054번</h1>
<p>https://www.acmicpc.net/problem/11054</p>

<h3 id="문제">문제</h3>

<p>수열 S가 어떤 수 Sk를 기준으로 S1 &lt; S2 &lt; … Sk-1 &lt; Sk &gt; Sk+1 &gt; … SN-1 &gt; SN을 만족한다면, 그 수열을 바이토닉 수열이라고 한다.</p>

<p>예를 들어, {10, 20, 30, 25, 20}과 {10, 20, 30, 40}, {50, 40, 25, 10} 은 바이토닉 수열이지만,  {1, 2, 3, 2, 1, 2, 3, 2, 1}과 {10, 20, 30, 40, 20, 30} 은 바이토닉 수열이 아니다.</p>

<p>수열 A가 주어졌을 때, 그 수열의 부분 수열 중 바이토닉 수열이면서 가장 긴 수열의 길이를 구하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 수열 A의 크기 N이 주어지고, 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ N ≤ 1,000, 1 ≤ Ai ≤ 1,000)</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에 수열 A의 부분 수열 중에서 가장 긴 바이토닉 수열의 길이를 출력한다.</p>

<hr />

<h2 id="풀이">풀이</h2>

<p>상당히 오래 고민한 문제이다.</p>

<p>이 문제의 핵심은 증가하는 수열의 dp랑 감소하는 수열의 dp 두개를 쓰는것이다.</p>

<p>증가하는 수열은 dpp에 저장하고, 감소하능 수열은 dpm에 저장한다. dpp는 기존에 풀어봤던 <a href="https://bo-oseng.github.io/algorithms/2022/02/11/boj-11053.html">가장 긴 증가 부분수열</a>과 완전히 동일하고, dpm은 조금 신경을 써야한다.</p>

<p>문제를 읽어보면 알겠지만 그냥 가장 긴 감소수열을 구하면 안되고 주어진 배열의 역순으로 스캔을 진행 해야한다.</p>

<p>여기서 간단하게 주어진 배열을 뒤집고, 뒤집고난 배열에서 가장 긴 증가수열을 구하면 원래 배열의 감소수열을 구하는것과 같음을 알 수있다. 이렇게 구한값을 dpm에 저장하고 다시 dpm을 뒤집으면 문제에 필요한 dpm을 만들 수 있다.</p>

<p>그후 dp에 dpp+dpm‐1의 값을 저장하면 바이토닉 수열의 dp가 완성된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>

<span class="n">nums</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>

 <span class="c1"># 가장 긴 증가수열을 저장할 dpp
</span><span class="n">dpp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>

 <span class="c1"># 가장 긴 감소수열을 저장할 dpm
</span><span class="n">dpm</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>

 <span class="c1"># 가장 긴 바이토닉 수열을 저장할 dp
</span><span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">n</span>

 <span class="c1"># 가장 긴 증가수열 구하기
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>

    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>

        <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>

            <span class="n">dpp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dpp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">dpp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

 <span class="c1"># nums를 뒤집은 rnums선언
</span><span class="n">rnums</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

 <span class="c1"># rnums의 가장 긴 증가수열
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>

    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>

        <span class="k">if</span> <span class="n">rnums</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">&lt;</span><span class="n">rnums</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>

            <span class="n">dpm</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dpm</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">dpm</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

 <span class="c1"># dpm을 뒤집음
</span><span class="n">dpm</span><span class="o">=</span><span class="n">dpm</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>

    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">dpp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">dpm</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span>


<span class="k">print</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">dp</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10
1 5 2 1 4 3 4 5 2 1
[1, 2, 2, 1, 3, 3, 4, 5, 2, 1]
[1, 5, 2, 1, 4, 3, 3, 3, 2, 1]
[1, 6, 3, 1, 6, 5, 6, 7, 3, 1]
</code></pre></div></div>

:ET